#pragma checksum "F:\clients\Impre\ppc-master\Portal\Features\Upload\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bb721276a6d5e54fc76776a00631d103db9bd736"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Features_Upload_Index), @"mvc.1.0.view", @"/Features/Upload/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Features/Upload/Index.cshtml", typeof(AspNetCore.Features_Upload_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "F:\clients\Impre\ppc-master\Portal\Features\_ViewImports.cshtml"
using Portal;

#line default
#line hidden
#line 2 "F:\clients\Impre\ppc-master\Portal\Features\_ViewImports.cshtml"
using Portal.Models;

#line default
#line hidden
#line 3 "F:\clients\Impre\ppc-master\Portal\Features\_ViewImports.cshtml"
using Portal.Helpers.HTML;

#line default
#line hidden
#line 5 "F:\clients\Impre\ppc-master\Portal\Features\Upload\Index.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bb721276a6d5e54fc76776a00631d103db9bd736", @"/Features/Upload/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6c1831ff6ff6d1f6721b272e06c352287d2a1fb2", @"/Features/_ViewImports.cshtml")]
    public class Features_Upload_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "F:\clients\Impre\ppc-master\Portal\Features\Upload\Index.cshtml"
  
    ViewData["Title"] = "Document Upload";

#line default
#line hidden
            BeginContext(48, 1, true);
            WriteLiteral("\n");
            EndContext();
            BeginContext(69, 767, true);
            WriteLiteral(@"

<div class=""box"">
    <h4>Information</h4>
    <p>
        The Upload is able to upload files out-of-band using the
        HTML5 File API with fallback for legacy browsers. You need to configure save action that will receive
        the uploaded files.
    </p>
</div>

<div>
    <div class=""demo-section k-content wide"">
        <div class=""wrapper"">
            <div id=""products""></div>
            <div class=""dropZoneElement"" style=""height: 200px; width: 200px; border: 1px solid red; visibility:visible;"">
                <div class=""textWrapper"">
                    <p class=""dropImageHereText"">Drop document here to upload</p>
                </div>
            </div>
        </div>
    </div>

    <input name=""files"" id=""files"" type=""file"" />

</div>

");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(854, 1115, true);
                WriteLiteral(@"
    <script>
        $(""#files"").kendoUpload({
            async: {
                saveUrl: ""/upload/saveAsync"",
                removeUrl: ""/upload/remove"",
                autoUpload: true
            },
            validation: {
                allowedExtensions: ["".txt"", "".doc"", "".docx"", "".pdf"", "".png"","".gif"","".jpg"" ]
            },
            multiple: false,
            success: onSuccess,
            dropZone: "".dropZoneElement""
        });

        function onSuccess(e) {
            //if (e.operation == ""upload"") {
            //    for (var i = 0; i < e.files.length; i++) {
            //        var file = e.files[i].rawFile;

            //        if (file) {
            //            var reader = new FileReader();

            //            reader.onloadend = function () {
            //                $(""<div class='product'><img src="" + this.result + "" /></div>"").appendTo($(""#products""));
            //            };

            //            reader.readAsDataURL(file);
            //       ");
                WriteLiteral(" }\n            //    }\n            //}\n            e.files = null;\n        }\n    </script>\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
